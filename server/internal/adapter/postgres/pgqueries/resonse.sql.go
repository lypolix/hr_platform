// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: resonse.sql

package pgqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createResponse = `-- name: CreateResponse :exec
INSERT INTO responses (
    id,
    vacancy_id,
    full_name,
    email,
    phone,
    cover_letter,
    resume_url,
    status,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
`

type CreateResponseParams struct {
	ID          uuid.UUID
	VacancyID   uuid.UUID
	FullName    string
	Email       string
	Phone       string
	CoverLetter string
	ResumeUrl   string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateResponse(ctx context.Context, arg CreateResponseParams) error {
	_, err := q.db.Exec(ctx, createResponse,
		arg.ID,
		arg.VacancyID,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.CoverLetter,
		arg.ResumeUrl,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getResponseByID = `-- name: GetResponseByID :one
SELECT
    id,
    vacancy_id,
    full_name,
    email,
    phone,
    cover_letter,
    resume_url,
    status,
    created_at,
    updated_at
FROM responses
WHERE id = $1
`

func (q *Queries) GetResponseByID(ctx context.Context, id uuid.UUID) (Response, error) {
	row := q.db.QueryRow(ctx, getResponseByID, id)
	var i Response
	err := row.Scan(
		&i.ID,
		&i.VacancyID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.CoverLetter,
		&i.ResumeUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listResponsesByVacancy = `-- name: ListResponsesByVacancy :many
SELECT
    id,
    vacancy_id,
    full_name,
    email,
    phone,
    cover_letter,
    resume_url,
    status,
    created_at,
    updated_at
FROM responses
WHERE vacancy_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListResponsesByVacancy(ctx context.Context, vacancyID uuid.UUID) ([]Response, error) {
	rows, err := q.db.Query(ctx, listResponsesByVacancy, vacancyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Response
	for rows.Next() {
		var i Response
		if err := rows.Scan(
			&i.ID,
			&i.VacancyID,
			&i.FullName,
			&i.Email,
			&i.Phone,
			&i.CoverLetter,
			&i.ResumeUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResponseStatus = `-- name: UpdateResponseStatus :exec
UPDATE responses
SET
    status = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateResponseStatusParams struct {
	Status    string
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateResponseStatus(ctx context.Context, arg UpdateResponseStatusParams) error {
	_, err := q.db.Exec(ctx, updateResponseStatus, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
