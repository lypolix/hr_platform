// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: company.sql

package pgqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :exec
INSERT INTO companies (
    id, title, description, contacts, inn, address, approved, representative_id, login, password_hash, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
`

type CreateCompanyParams struct {
	ID               uuid.UUID
	Title            string
	Description      string
	Contacts         string
	Inn              string
	Address          string
	Approved         bool
	RepresentativeID uuid.UUID
	Login            string
	PasswordHash     string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) error {
	_, err := q.db.Exec(ctx, createCompany,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Contacts,
		arg.Inn,
		arg.Address,
		arg.Approved,
		arg.RepresentativeID,
		arg.Login,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT
    id,
    title,
    description,
    contacts,
    inn,
    address,
    approved,
    representative_id,
    login,
    password_hash,
    created_at,
    updated_at
FROM companies
WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Contacts,
		&i.Inn,
		&i.Address,
		&i.Approved,
		&i.RepresentativeID,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByINN = `-- name: GetCompanyByINN :one
SELECT
    id,
    title,
    description,
    contacts,
    inn,
    address,
    approved,
    representative_id,
    login,
    password_hash,
    created_at,
    updated_at
FROM companies
WHERE inn = $1
`

func (q *Queries) GetCompanyByINN(ctx context.Context, inn string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByINN, inn)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Contacts,
		&i.Inn,
		&i.Address,
		&i.Approved,
		&i.RepresentativeID,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByLogin = `-- name: GetCompanyByLogin :one
SELECT
    id,
    title,
    description,
    contacts,
    inn,
    address,
    approved,
    representative_id,
    login,
    password_hash,
    created_at,
    updated_at
FROM companies
WHERE login = $1
`

func (q *Queries) GetCompanyByLogin(ctx context.Context, login string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByLogin, login)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Contacts,
		&i.Inn,
		&i.Address,
		&i.Approved,
		&i.RepresentativeID,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE companies
SET
    title = $1,
    description = $2,
    contacts = $3,
    inn = $4,
    address = $5,
    approved = $6,
    representative_id = $7,
    login = $8,
    password_hash = $9,
    created_at = $10,
    updated_at = $11
WHERE id = $12
`

type UpdateCompanyParams struct {
	Title            string
	Description      string
	Contacts         string
	Inn              string
	Address          string
	Approved         bool
	RepresentativeID uuid.UUID
	Login            string
	PasswordHash     string
	CreatedAt        time.Time
	UpdatedAt        time.Time
	ID               uuid.UUID
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.Exec(ctx, updateCompany,
		arg.Title,
		arg.Description,
		arg.Contacts,
		arg.Inn,
		arg.Address,
		arg.Approved,
		arg.RepresentativeID,
		arg.Login,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
