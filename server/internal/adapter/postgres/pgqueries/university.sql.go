// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: university.sql

package pgqueries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUniversity = `-- name: CreateUniversity :exec
INSERT INTO universities (id, title, login, password_hash, inn, confirmed, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateUniversityParams struct {
	ID           uuid.UUID
	Title        string
	Login        string
	PasswordHash string
	Inn          string
	Confirmed    bool
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) error {
	_, err := q.db.Exec(ctx, createUniversity,
		arg.ID,
		arg.Title,
		arg.Login,
		arg.PasswordHash,
		arg.Inn,
		arg.Confirmed,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUniversityByID = `-- name: GetUniversityByID :one
SELECT
    id,
    login,
    password_hash,
    inn,
    title,
    confirmed,
    created_at,
    updated_at
FROM universities
WHERE id = $1
`

type GetUniversityByIDRow struct {
	ID           uuid.UUID
	Login        string
	PasswordHash string
	Inn          string
	Title        string
	Confirmed    bool
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetUniversityByID(ctx context.Context, id uuid.UUID) (GetUniversityByIDRow, error) {
	row := q.db.QueryRow(ctx, getUniversityByID, id)
	var i GetUniversityByIDRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.PasswordHash,
		&i.Inn,
		&i.Title,
		&i.Confirmed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUniversity = `-- name: UpdateUniversity :exec
UPDATE universities
SET
    login = $1,
    password_hash = $2,
    title = $3,
    inn = $4,
    confirmed = $5,
    created_at = $6,
    updated_at = $7
WHERE id = $8
`

type UpdateUniversityParams struct {
	Login        string
	PasswordHash string
	Title        string
	Inn          string
	Confirmed    bool
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ID           uuid.UUID
}

func (q *Queries) UpdateUniversity(ctx context.Context, arg UpdateUniversityParams) error {
	_, err := q.db.Exec(ctx, updateUniversity,
		arg.Login,
		arg.PasswordHash,
		arg.Title,
		arg.Inn,
		arg.Confirmed,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
